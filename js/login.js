// pmfby/js/login.js

// Import all secure modules
import { supabaseClient } from './config.js';
import { SecurityUtils } from './security.js';
import { authManager } from './auth.js';     
import { errorHandler } from './error-handler.js';
import { secureDB } from './database.js'; 

// CAPTCHA functionality
let currentCaptcha = '';
let tempLoginData = {};

function generateCaptcha() {
    let captcha = '';
    for (let i = 0; i < 6; i++) {
        captcha += Math.floor(Math.random() * 10).toString();
    }
    return captcha;
}

function drawCaptcha() {
    currentCaptcha = generateCaptcha();
    const captchaDisplay = document.getElementById('captchaDisplay');
    if(captchaDisplay) captchaDisplay.textContent = currentCaptcha;
}

// Hash password with SHA-256 (using Web Crypto API)
async function hashPassword(password) {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// Load districts from Supabase using secureDB
async function loadDistricts() {
    try {
        const districtSelect = document.getElementById('district');
        if (!districtSelect) return;
        
        const districts = await secureDB.getDistricts(); 
        
        while (districtSelect.options.length > 1) {
            districtSelect.remove(1);
        }
        
        if (districts) {
            districts.forEach(district => {
                const option = document.createElement('option');
                option.value = district.id;
                option.textContent = district.name;
                districtSelect.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Error loading districts:', error);
        errorHandler.showError('рдЬрд┐рд▓рд╛ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐'); 
        const districtSelect = document.getElementById('district');
        if (districtSelect) {
            const errorOption = document.createElement('option');
            errorOption.value = "";
            errorOption.textContent = "рдЬрд┐рд▓рд╛ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐";
            errorOption.style.color = "#C62828";
            districtSelect.appendChild(errorOption);
        }
    }
}

// Hide messages on the login page
function hideMessages() {
    const errorDiv = document.getElementById('errorMessage');
    const successDiv = document.getElementById('successMessage');
    if (errorDiv) errorDiv.style.display = 'none';
    if (successDiv) successDiv.style.display = 'none';
}

// CAPTCHA event listeners
document.getElementById('refreshCaptcha')?.addEventListener('click', function() {
    drawCaptcha();
    const captchaInput = document.getElementById('captchaInput');
    if (captchaInput) captchaInput.value = ''; 
    hideMessages(); 
});

document.getElementById('loginForm')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    tempLoginData = {
        username: document.getElementById('username')?.value.trim(),
        password: document.getElementById('password')?.value,
        districtId: document.getElementById('district')?.value,
    };

    if (!tempLoginData.username || !tempLoginData.password || !tempLoginData.districtId || !document.getElementById('captchaInput')?.value.trim()) {
        errorHandler.showError('рдХреГрдкрдпрд╛ рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдлреАрд▓реНрдб рднрд░реЗрдВ'); 
        return;
    }
    
    const userInputCaptcha = document.getElementById('captchaInput')?.value;
    if (userInputCaptcha !== currentCaptcha) {
        errorHandler.showError('рдЧрд▓рдд рдХреИрдкреНрдЪрд╛! рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред'); 
        drawCaptcha(); 
        const captchaInput = document.getElementById('captchaInput');
        if (captchaInput) captchaInput.value = ''; 
        return; 
    }

    const loginBtn = document.getElementById('loginBtn');
    if (loginBtn) {
        loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" style="width: 1rem; height: 1rem;"></span> Login...';
        loginBtn.disabled = true;
    }
    hideMessages(); 

    proceedWithLogin();
});

async function proceedWithLogin() {
    try {
        const { username, password, districtId } = tempLoginData;
        
        const hashedPassword = await hashPassword(password);
        
        // --- STEP 1: Custom user verification (isPublic: true to bypass auth check) ---
        const users = await secureDB.secureSelect('test_users', {
            select: `
                id, username, email, password_hash, full_name, role, is_active, district_id,
                districts (
                    id, name
                )
            `,
            filters: { username: username, is_active: true }, 
            single: true, 
            isPublic: true 
        });

        if (!users) { 
            throw new Error('рдЕрдорд╛рдиреНрдп рдпреВрдЬрд░рдиреЗрдо рдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб');
        }

        if (users.password_hash !== hashedPassword) {
            throw new Error('рдЕрдорд╛рдиреНрдп рдпреВрдЬрд░рдиреЗрдо рдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб');
        }

        if (users.district_id && users.district_id !== districtId) { 
            throw new Error('рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдЪрдпрдирд┐рдд рдЬрд┐рд▓рд╛ рдЖрдкрдХреЗ UserName рд╕реЗ рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддрд╛');
        }
        
        if (!users.email || users.email.trim() === '') {
            throw new Error('рд▓реЙрдЧрд┐рди рдХреЗ рд▓рд┐рдП рдпреВрдЬрд░ рдХрд╛ рдИрдореЗрд▓ рдПрдбреНрд░реЗрд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред');
        }

        // --- STEP 2: Manually populate sessionStorage for client-side state ---
        sessionStorage.setItem('userId', users.id);
        sessionStorage.setItem('username', users.username);
        sessionStorage.setItem('fullName', users.full_name);
        sessionStorage.setItem('role', users.role);
        sessionStorage.setItem('districtId', users.district_id);
        sessionStorage.setItem('districtName', users.districts ? users.districts.name : 'Unknown District');
        sessionStorage.setItem('authVerified', 'true');
        sessionStorage.setItem('authTimestamp', Date.now().toString());

        // --- STEP 3: SYNCHRONOUSLY UPDATE authManager's internal state ---
        // This is the critical change. We pass the data directly to setAuthManagerState.
        authManager.setAuthManagerState({
            id: users.id,
            username: users.username,
            fullName: users.full_name,
            role: users.role,
            districtId: users.district_id,
            districtName: users.districts ? users.districts.name : 'Unknown District'
        });
        
        // --- STEP 4: Perform authenticated database updates (now authManager is ready) ---
        // This will now pass the authManager.requireAuth() check
        await secureDB.secureUpdate('test_users', users.id, {
            last_login: new Date().toISOString(),
            is_online: true,
            last_activity: new Date().toISOString()
        });

        errorHandler.showSuccess('рд▓реЙрдЧрд┐рди рд╕рдлрд▓! рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ...');

        setTimeout(() => {
            window.location.href = 'dashboard.html';
        }, 1500);

    } catch (error) {
        console.error('Login error:', error);
        errorHandler.showError(error.message || 'рд▓реЙрдЧрд┐рди рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред'); 
        
        const loginBtn = document.getElementById('loginBtn');
        if (loginBtn) {
            loginBtn.innerHTML = 'Login';
            loginBtn.disabled = false;
        }
        
        drawCaptcha(); 
        const captchaInput = document.getElementById('captchaInput');
        if (captchaInput) captchaInput.value = ''; 
        tempLoginData = {};
    }
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', async function() {
    sessionStorage.removeItem('redirectCount');

    // Check if authenticated via sessionStorage and redirect if so
    await authManager.loadSessionFromStorage(); // This will set authManager's state
    if (authManager.isUserAuthenticated()) {
        console.log('User already logged in via sessionStorage, redirecting to dashboard.');
        window.location.href = 'dashboard.html';
        return;
    }

    drawCaptcha();
    loadDistricts(); 
});

// Expose functions to window scope if needed (e.g., for inline event handlers, though generally avoided)
window.drawCaptcha = drawCaptcha;
window.proceedWithLogin = proceedWithLogin;

console.log(`
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
тХС                рд╕рдВрдЪрд╛рд▓рдирд╛рд▓рдп рдХреГрд╖рд┐ рдЫрддреНрддреАрд╕рдЧрдврд╝                      тХС
тХС                Agriculture Department Portal                  тХС
тХС                                                              тХС
тХС  тЬи EXACT IMAGE LOOK REPLICATED                             тХС
тХС  ЁЯОи Warli Art Background Visible                            тХС
тХС  ЁЯФв Your Numerical CAPTCHA Logic Retained                   тХС
тХС  ЁЯФТ Your Supabase Login Algorithm Integrated                тХС
тХС  тЬФя╕П District Selection VISIBLE & FUNCTIONAL                 тХС
тХС  тЬФя╕П Text & Link Changes Applied                             тХС
тХС  тЬФя╕П INPUT FIELDS NOW HAVE PISTACHIO COLOR                   тХС
тХС  ЁЯУ▒ Fully Responsive Design                                 тХС
тХС  ЁЯЪА Redirects to: dashboard.html                            тХС
тХС                                                              тХС
тХС  Visual & Functional Details:                                тХС
тХС  тЬЕ Left title: "рд╕рдВрдЪрд╛рд▓рдирд╛рд▓рдп рдХреГрд╖рд┐ рдЫрддреНрддреАрд╕рдЧрдврд╝"                   тХС
тХС  тЬЕ Welcome text: "Welcome to Login"                        тХС
тХС  тЬЕ Bottom links "Go to Website/Portal" REMOVED             тХС
тХС  тЬЕ District dropdown is now VISIBLE and functional         тХС
тХС  тЬЕ Username, Password, Captcha fields have pistachio background #F0FFF0
тХС  тЬЕ Focus state reverts to white for clear typing           тХС
тХС  тЬЕ All existing JS login/captcha logic preserved           тХС
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ
`);
